{
    "compilerOptions": {
        "moduleResolution": "bundler",
        "target": "ES2020",
        "module": "ES2020",
        /**
         * svelte-preprocess cannot figure out whether you have
         * a value or a type, so tell TypeScript to enforce using
         * `import type` instead of `import` for Types.
         */
        "verbatimModuleSyntax": true,
        "isolatedModules": true,
        "resolveJsonModule": true,
        /**
         * To have warnings / errors of the Svelte compiler at the
         * correct position, enable source maps by default.
         */
        "sourceMap": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        /**
         * Typecheck JS in `.svelte` and `.js` files by default.
         * Disable this if you'd like to use dynamic types.
         */
        "allowJs": true,
        /**
         * generally good safety settings
         */
        "strict": true,
        "noFallthroughCasesInSwitch": true,
        "noImplicitOverride": true,
        "noImplicitReturns": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "useUnknownInCatchVariables": true,
        "noUncheckedIndexedAccess": true,
        /**
         * very strict settings can be disabled if needed
         */
        "exactOptionalPropertyTypes": true,
        "noPropertyAccessFromIndexSignature": true,
        /**
         * fix for ts check in node_modules
         * => https://github.com/microsoft/TypeScript/issues/42797
         */
        "checkJs": true,
        "maxNodeModuleJsDepth": 0
    },
    /**
     * Use global.d.ts instead of compilerOptions.types
     * to avoid limiting type declarations.
     */
    "include": ["src/**/*.d.ts", "src/**/*.js", "src/**/*.svelte"],
    "exclude": [
        "node_modules/**/*",
        "dist/**/*",
        ".routify/**/*",
        ".vscode/**/*",
        "public/**/*"
    ]
}
